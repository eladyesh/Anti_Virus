
__doc__ = '\n    ast\n    ~~~\n\n    The `ast` module helps Python applications to process trees of the Python\n    abstract syntax grammar.  The abstract syntax itself might change with\n    each Python release; this module helps to find out programmatically what\n    the current grammar looks like and allows modifications of it.\n\n    An abstract syntax tree can be generated by passing `ast.PyCF_ONLY_AST` as\n    a flag to the `compile()` builtin function or by using the `parse()`\n    function from this module.  The result will be a tree of objects whose\n    classes all inherit from `ast.AST`.\n\n    A modified abstract syntax tree can be compiled into a Python code object\n    using the built-in `compile()` function.\n\n    Additionally various helper functions are provided that make working with\n    the trees simpler.  The main intention of the helper functions and this\n    module in general is to provide an easy to use interface for libraries\n    that work tightly with the python syntax (template engines for example).\n\n\n    :copyright: Copyright 2008 by Armin Ronacher.\n    :license: Python License.\n'
import sys
from _ast import *
from contextlib import contextmanager, nullcontext
from enum import IntEnum, auto

def parse(source = None, filename = ('<unknown>', 'exec'), mode = {
    'type_comments': False,
    'feature_version': None }, *, type_comments, feature_version):
    '''
    Parse the source into an AST node.
    Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
    Pass type_comments=True to get back type comments where the syntax allows.
    '''
    flags = PyCF_ONLY_AST
    if type_comments:
        flags |= PyCF_TYPE_COMMENTS
# WARNING: Decompyle incomplete


def literal_eval(node_or_string):
    '''
    Safely evaluate an expression node or a string containing a Python
    expression.  The string or node provided may only consist of the following
    Python literal structures: strings, bytes, numbers, tuples, lists, dicts,
    sets, booleans, and None.
    '''
    if isinstance(node_or_string, str):
        node_or_string = parse(node_or_string.lstrip(' \t'), 'eval', **('mode',))
    if isinstance(node_or_string, Expression):
        node_or_string = node_or_string.body
    
    def _raise_malformed_node(node):
        msg = 'malformed node or string'
        if lno = getattr(node, 'lineno', None):
            msg += f''' on line {lno}'''
        raise ValueError(msg + f''': {node!r}''')

    
    def _convert_num(node = None):
        if isinstance(node, Constant) or type(node.value) not in (int, float, complex):
            _raise_malformed_node(node)
        return node.value

    
    def _convert_signed_num(node = None):
        if isinstance(node, UnaryOp) and isinstance(node.op, (UAdd, USub)):
            operand = _convert_num(node.operand)
            if isinstance(node.op, UAdd):
                return +operand
            return -None
        return None(node)

    
    def _convert(node = None):
        if isinstance(node, Constant):
            return node.value
        if None(node, Tuple):
            return tuple(map(_convert, node.elts))
        if None(node, List):
            return list(map(_convert, node.elts))
        if isinstance(node, Dict):
            if len(node.keys) != len(node.values):
                _raise_malformed_node(node)
            return dict(zip(map(_convert, node.keys), map(_convert, node.values)))
        if None if None(node, Set) else node.args(node, BinOp) and isinstance(node.op, (Add, Sub)):
            left = _convert_signed_num(node.left)
            right = _convert_num(node.right)
            if isinstance(left, (int, float)) and isinstance(right, complex):
                if isinstance(node.op, Add):
                    return left + right
                return None - right
            return None(node)

    return _convert(node_or_string)


def dump(node = None, annotate_fields = (True, False), include_attributes = {
    'indent': None }, *, indent):
    '''
    Return a formatted dump of the tree in node.  This is mainly useful for
    debugging purposes.  If annotate_fields is true (by default),
    the returned string will show the names and the values for fields.
    If annotate_fields is false, the result string will be more compact by
    omitting unambiguous field names.  Attributes such as line
    numbers and column offsets are not dumped by default.  If this is wanted,
    include_attributes can be set to true.  If indent is a non-negative
    integer or string, then the tree will be pretty-printed with that indent
    level. None (the default) selects the single line representation.
    '''
    
    def _format(node = None, level = None):
        if indent is not None:
            level += 1
            prefix = '\n' + indent * level
            sep = ',\n' + indent * level
        else:
            prefix = ''
            sep = ', '
    # WARNING: Decompyle incomplete

    if not isinstance(node, AST):
        raise TypeError('expected AST, got %r' % node.__class__.__name__)
    if not None is not None and isinstance(indent, str):
        indent = ' ' * indent
    return _format(node)[0]


def copy_location(new_node, old_node):
    '''
    Copy source location (`lineno`, `col_offset`, `end_lineno`, and `end_col_offset`
    attributes) from *old_node* to *new_node* if possible, and return *new_node*.
    '''
    return new_node


def fix_missing_locations(node):
    '''
    When you compile a node tree with compile(), the compiler expects lineno and
    col_offset attributes for every node that supports them.  This is rather
    tedious to fill in for generated nodes, so this helper adds these attributes
    recursively where not already set, by setting them to the values of the
    parent node.  It works recursively starting at *node*.
    '''
    
    def _fix(node = None, lineno = None, col_offset = None, end_lineno = None, end_col_offset = None):
        if 'lineno' in node._attributes:
            if not hasattr(node, 'lineno'):
                node.lineno = lineno
            else:
                lineno = node.lineno
        if 'end_lineno' in node._attributes:
            if getattr(node, 'end_lineno', None) is None:
                node.end_lineno = end_lineno
            else:
                end_lineno = node.end_lineno
        if 'col_offset' in node._attributes:
            if not hasattr(node, 'col_offset'):
                node.col_offset = col_offset
            else:
                col_offset = node.col_offset
        if 'end_col_offset' in node._attributes:
            if getattr(node, 'end_col_offset', None) is None:
                node.end_col_offset = end_col_offset
            else:
                end_col_offset = node.end_col_offset

    _fix(node, 1, 0, 1, 0)
    return node


def increment_lineno(node, n = (1,)):
    '''
    Increment the line number and end line number of each node in the tree
    starting at *node* by *n*. This is useful to "move code" to a different
    location in a file.
    '''
    return node


def iter_fields(node):
    '''
    Yield a tuple of ``(fieldname, value)`` for each field in ``node._fields``
    that is present on *node*.
    '''
    pass
# WARNING: Decompyle incomplete


def iter_child_nodes(node):
    '''
    Yield all direct child nodes of *node*, that is, all fields that are nodes
    and all items of fields that are lists of nodes.
    '''
    pass
# WARNING: Decompyle incomplete


def get_docstring(node, clean = (True,)):
    '''
    Return the docstring for the given node or None if no docstring can
    be found.  If the node provided does not have docstrings a TypeError
    will be raised.

    If *clean* is `True`, all tabs are expanded to spaces and any whitespace
    that can be uniformly removed from the second line onwards is removed.
    '''
    if not isinstance(node, (AsyncFunctionDef, FunctionDef, ClassDef, Module)):
        raise TypeError("%r can't have docstrings" % node.__class__.__name__)
    if not None.body or isinstance(node.body[0], Expr):
        return None
    node = None.body[0].value
    if isinstance(node, Str):
        text = node.s
    elif isinstance(node, Constant) and isinstance(node.value, str):
        text = node.value
    else:
        return None
    if None:
        import inspect
        text = inspect.cleandoc(text)
    return text


def _splitlines_no_ff(source):
    '''Split a string into lines ignoring form feed and other chars.

    This mimics how the Python parser splits source code.
    '''
    idx = 0
    lines = []
    next_line = ''
    if idx < len(source):
        c = source[idx]
        next_line += c
        idx += 1
        if c == '\r' and idx < len(source) and source[idx] == '\n':
            next_line += '\n'
            idx += 1
        if c in '\r\n':
            lines.append(next_line)
            next_line = ''
        if idx < len(source) or next_line:
            lines.append(next_line)
    return lines


def _pad_whitespace(source):
    """Replace all chars except '\\f\\t' in a line with spaces."""
    result = ''
    result += ' '
    continue
    return result


def get_source_segment(source = None, node = {
    'padded': False }, *, padded):
    '''Get source code segment of the *source* that generated *node*.

    If some location information (`lineno`, `end_lineno`, `col_offset`,
    or `end_col_offset`) is missing, return None.

    If *padded* is `True`, the first line of a multi-line statement will
    be padded with spaces to match its original position.
    '''
    pass
# WARNING: Decompyle incomplete


def walk(node):
    """
    Recursively yield all descendant nodes in the tree starting at *node*
    (including *node* itself), in no specified order.  This is useful if you
    only want to modify nodes in place and don't care about the context.
    """
    pass
# WARNING: Decompyle incomplete


class NodeVisitor(object):
    """
    A node visitor base class that walks the abstract syntax tree and calls a
    visitor function for every node found.  This function may return a value
    which is forwarded by the `visit` method.

    This class is meant to be subclassed, with the subclass adding visitor
    methods.

    Per default the visitor functions for the nodes are ``'visit_'`` +
    class name of the node.  So a `TryFinally` node visit function would
    be `visit_TryFinally`.  This behavior can be changed by overriding
    the `visit` method.  If no visitor function exists for a node
    (return value `None`) the `generic_visit` visitor is used instead.

    Don't use the `NodeVisitor` if you want to apply changes to nodes during
    traversing.  For this a special visitor exists (`NodeTransformer`) that
    allows modifications.
    """
    
    def visit(self, node):
        '''Visit a node.'''
        method = 'visit_' + node.__class__.__name__
        visitor = getattr(self, method, self.generic_visit)
        return visitor(node)

    
    def generic_visit(self, node):
        '''Called if no explicit visitor function exists for a node.'''
        pass

    
    def visit_Constant(self, node):
        value = node.value
        type_name = _const_node_type_names.get(type(value))
        if type_name is None:
            for cls, name in _const_node_type_names.items():
                type_name = name
            continue
    # WARNING: Decompyle incomplete



class NodeTransformer(NodeVisitor):
    """
    A :class:`NodeVisitor` subclass that walks the abstract syntax tree and
    allows modification of nodes.

    The `NodeTransformer` will walk the AST and use the return value of the
    visitor methods to replace or remove the old node.  If the return value of
    the visitor method is ``None``, the node will be removed from its location,
    otherwise it is replaced with the return value.  The return value may be the
    original node in which case no replacement takes place.

    Here is an example transformer that rewrites all occurrences of name lookups
    (``foo``) to ``data['foo']``::

       class RewriteName(NodeTransformer):

           def visit_Name(self, node):
               return Subscript(
                   value=Name(id='data', ctx=Load()),
                   slice=Constant(value=node.id),
                   ctx=node.ctx
               )

    Keep in mind that if the node you're operating on has child nodes you must
    either transform the child nodes yourself or call the :meth:`generic_visit`
    method for the node first.

    For nodes that were part of a collection of statements (that applies to all
    statement nodes), the visitor may also return a list of nodes rather than
    just a single node.

    Usually you use the transformer like this::

       node = YourTransformer().visit(node)
    """
    
    def generic_visit(self, node):
        new_values.append(value)
        continue
        old_value[:] = new_values
        continue
        if isinstance(old_value, AST):
            new_node = self.visit(old_value)
            if new_node is None:
                delattr(node, field)
                continue
            setattr(node, field, new_node)
        continue
        return node


if not hasattr(Constant, 'n'):
    
    def _getter(self):
        '''Deprecated. Use value instead.'''
        return self.value

    
    def _setter(self, value):
        self.value = value

    Constant.n = property(_getter, _setter)
    Constant.s = property(_getter, _setter)

class _ABC(type):
    
    def __init__(cls, *args):
        cls.__doc__ = 'Deprecated AST node class. Use ast.Constant instead'

    
    def __instancecheck__(cls, inst):
        if not isinstance(inst, Constant):
            return False
    # WARNING: Decompyle incomplete



def _new(cls, *args, **kwargs):
    pos = cls._fields.index(key)
    if pos < len(args):
        raise TypeError(f'''{cls.__name__} got multiple values for argument {key!r}''')
# WARNING: Decompyle incomplete

Num = <NODE:26>((lambda : _fields = ('n',)__new__ = _new), 'Num', Constant, _ABC, **('metaclass',))
Str = <NODE:26>((lambda : _fields = ('s',)__new__ = _new), 'Str', Constant, _ABC, **('metaclass',))
Bytes = <NODE:26>((lambda : _fields = ('s',)__new__ = _new), 'Bytes', Constant, _ABC, **('metaclass',))
NameConstant = <NODE:26>((lambda : __new__ = _new), 'NameConstant', Constant, _ABC, **('metaclass',))
Ellipsis = <NODE:26>((lambda : _fields = ()
def __new__(cls, *args, **kwargs):
pass# WARNING: Decompyle incomplete
), 'Ellipsis', Constant, _ABC, **('metaclass',))
_const_types = {
    Ellipsis: (type(...),),
    NameConstant: (type(None), bool),
    Bytes: (bytes,),
    Str: (str,),
    Num: (int, float, complex) }
_const_types_not = {
    Num: (bool,) }
_const_node_type_names = {
    type(...): 'Ellipsis',
    bytes: 'Bytes',
    str: 'Str',
    complex: 'Num',
    float: 'Num',
    int: 'Num',
    type(None): 'NameConstant',
    bool: 'NameConstant' }

class slice(AST):
    '''Deprecated AST node class.'''
    pass


class Index(slice):
    '''Deprecated AST node class. Use the index value directly instead.'''
    
    def __new__(cls, value, **kwargs):
        return value



class ExtSlice(slice):
    '''Deprecated AST node class. Use ast.Tuple instead.'''
    
    def __new__(cls, dims = ((),), **kwargs):
        pass
    # WARNING: Decompyle incomplete


if not hasattr(Tuple, 'dims'):
    
    def _dims_getter(self):
        '''Deprecated. Use elts instead.'''
        return self.elts

    
    def _dims_setter(self, value):
        self.elts = value

    Tuple.dims = property(_dims_getter, _dims_setter)

class Suite(mod):
    '''Deprecated AST node class.  Unused in Python 3.'''
    pass


class AugLoad(expr_context):
    '''Deprecated AST node class.  Unused in Python 3.'''
    pass


class AugStore(expr_context):
    '''Deprecated AST node class.  Unused in Python 3.'''
    pass


class Param(expr_context):
    '''Deprecated AST node class.  Unused in Python 3.'''
    pass

_INFSTR = '1e' + repr(sys.float_info.max_10_exp + 1)

class _Precedence(IntEnum):
    '''Precedence table that originated from python grammar.'''
    TUPLE = auto()
    YIELD = auto()
    TEST = auto()
    OR = auto()
    AND = auto()
    NOT = auto()
    CMP = auto()
    EXPR = auto()
    BOR = EXPR
    BXOR = auto()
    BAND = auto()
    SHIFT = auto()
    ARITH = auto()
    TERM = auto()
    FACTOR = auto()
    POWER = auto()
    AWAIT = auto()
    ATOM = auto()
    
    def next(self):
        pass
    # WARNING: Decompyle incomplete


_SINGLE_QUOTES = ("'", '"')
_MULTI_QUOTES = ('"""', "'''")
# WARNING: Decompyle incomplete
